MODULE header
  VAR ip_src: {h1,h2,h3,h4,h5};
      ip_dst: {h1,h2,h3,h4,h5};
      proto: {TCP, UDP, ICMP};
      action: {forward, drop, modify};

MODULE rules
   VAR src: {h1,h2,h3,h4,h5};
       dst: {h1,h2,h3,h4,h5};
       action: {allow, deny};
   
MODULE main
VAR location: {h1,h2,h3,h4,h5,s1,s2,s3};
    packet: header;  
    rule: rules;
 
ASSIGN
   init(location) := {h1, h2, h3, h4, h5};
   init(packet.ip_src)  := {h1, h2, h3, h4, h5};
   init(packet.ip_dst)  := {h1, h2, h3, h4, h5};
   init(packet.proto) := ICMP;
   init(packet.action) := forward;
   init(rule.src) := {h1, h2, h3, h4, h5};
   init(rule.dst) := {h1, h2, h3, h4, h5};
   init(rule.action) := allow;

   next(location) := case

                     (location = h1) & (packet.ip_src = h1) &
                     (rule.src = h1) & (rule.dst = h5)
                     & (rule.action = allow) :s1;

                     (location = s1) & (packet.ip_src = h1) &
                     (rule.src = h1) & (rule.dst = h5)
                     & (rule.action = allow) :s2;

                     location = s2 & (packet.ip_src = h1) &
                     (rule.src = h1) & (rule.dst = h5)
                     & (rule.action = allow) :s3;

                     location = s3 & (packet.ip_src = h1) &
                     (rule.src = h1) & (rule.dst = h5)
                     & (rule.action = allow):h5;

                     TRUE: location;
                     
                     esac;

    -- next(packet) := case
    --              TRUE: (location in {h1,s1,s2,s3,h5}) & (packet.action = forward); 
    --               esac;

